package org.fska.projects.problems1_99.prob_60_69.problem61;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
 * are all figurate (polygonal) numbers and are generated by the following
 * formulae:
 * 
 * Triangle P3,n=n(n+1)/2 1, 3, 6, 10, 15, ... Square P4,n=n2 1, 4, 9, 16, 25,
 * ... Pentagonal P5,n=n(3n−1)/2 1, 5, 12, 22, 35, ... Hexagonal P6,n=n(2n−1) 1,
 * 6, 15, 28, 45, ... Heptagonal P7,n=n(5n−3)/2 1, 7, 18, 34, 55, ... Octagonal
 * P8,n=n(3n−2) 1, 8, 21, 40, 65, ...
 * 
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
 * interesting properties.
 * 
 * The set is cyclic, in that the last two digits of each number is the first
 * two digits of the next number (including the last number with the first).
 * Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
 * pentagonal (P5,44=2882), is represented by a different number in the set.
 * This is the only set of 4-digit numbers with this property.
 * 
 * Find the sum of the only ordered set of six cyclic 4-digit numbers for which
 * each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
 * octagonal, is represented by a different number in the set.
 * 
 * @author fskallos
 * 
 */
public class Problem_61 {
	
	public static void main(String[] args){
		Problem_61 problem = new Problem_61();
		problem.run();
	}
	
	int result = Integer.MAX_VALUE;
	int[] solution;
	Integer[][] numbers;
	
	public void run(){
		result =0;
		solution = new int[6];
		numbers = new Integer[6][];
		
		for(int i = 0; i < 6; i++){
			numbers[i] = generateNumbers(i);
		}
		
		for(int i = 0; i < numbers[5].length; i++){
			solution[5] = numbers[5][i];
			if(findNext(5,1)) break;
		}
		for(int i = 0; i < solution.length; i++){
			result += solution[i];
			System.out.print(solution[i] + " :: ");
		}
		System.out.println("");
		System.out.println("Done! "+ result);
	}
	
	public boolean findNext(int last, int length){
		for(int i  = 0; i < solution.length; i++){
			if(solution[i] != 0) continue;
			for(int j = 0; j < numbers[i].length; j++){
				boolean unique = true;
				for(int k = 0; k < solution.length; k++){
					if(numbers[i][j] == solution[k]){
						unique = false;
						break;
					}
				}
				
				if(unique &&
						numbers[i][j] / 100 == solution[last] % 100) {
					solution[i] = numbers[i][j];
					if(length == 5){
						if(solution[5] / 100 == solution[i] % 100){
							return true;
						}
					}
					if(findNext(i, length + 1)) return true;
				}
			}
			solution[i] = 0;
		}
		return false;
	}
	
	private Integer[] generateNumbers(int index){
		List<Integer> results = new ArrayList<Integer>();
		int n = 0;
		int number = 0;
		while(number < 10000){
			switch(index){
			case 0:
				number = triangle(n);
				break;
			case 1:
				number = square(n);
				break;
			case 2:
				number = pentagonal(n);
				break;
			case 3:
				number = hexagonal(n);
				break;
			case 4:
				number= heptagonal(n);
				break;
			case 5:
				number = octagonal(n);
				break;
			}
			n++;
			if(number >= 1000)
				results.add(number);
		}
		return results.toArray(new Integer[0]);
	}

	private int triangle(int input) {
		return (input * (input + 1)) / 2;
	}

	private int square(int input) {
		return input * input;
	}

	private int pentagonal(int input) {
		return (input * (3 * input - 1)) / 2;
	}

	private int hexagonal(int input) {
		return input * (2 * input - 1);
	}

	private int heptagonal(int input) {
		return (input * (5 * input - 3)) / 2;
	}

	private int octagonal(int input) {
		return input * (3 * input - 2);
	}
}
